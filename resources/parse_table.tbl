Type:Program
Production:LexemeTerminal("Program")|AnySymbolOfClass(IdentifierSymbol)|LexemeTerminal("(")|NonTerminal(IdList)|LexemeTerminal(")")|LexemeTerminal(";")|NonTerminal(Declarations)|NonTerminal(SubprogramDeclarations)|NonTerminal(CompoundStatement)|LexemeTerminal(".")
Symbol:LexemeTerminal("Program")

Type:IdList
Production:AnySymbolOfClass(IdentifierSymbol)|NonTerminal(IdList`)
Symbol:AnySymbolOfClass(IdentifierSymbol)

Type:IdList`
Production:LexemeTerminal(",")|AnySymbolOfClass(IdentifierSymbol)|NonTerminal(IdList`)
Symbol:LexemeTerminal(",")
Production:
Symbol:LexemeTerminal(":")|LexemeTerminal(")")

Type:Declarations
Production:LexemeTerminal("var")|NonTerminal(IdList)|LexemeTerminal(":")|NonTerminal(Type)|LexemeTerminal(";")|NonTerminal(Declarations)
Symbol:LexemeTerminal("var")
Production:
Symbol:LexemeTerminal("function")|LexemeTerminal("procedure")|LexemeTerminal("begin")

Type:Type
Production:NonTerminal(StandardType)
Symbol:LexemeTerminal("integer")|LexemeTerminal("real")
Production:LexemeTerminal("array")|LexemeTerminal("[")|AnySymbolOfClass(LiteralSymbol)|LexemeTerminal(".")|LexemeTerminal(".")|AnySymbolOfClass(LiteralSymbol)|LexemeTerminal("]")|LexemeTerminal("of")|NonTerminal(StandardType)
Symbol:LexemeTerminal("array")

Type:StandardType
Production:LexemeTerminal("integer")
Symbol:LexemeTerminal("integer")
Production:LexemeTerminal("real")
Symbol:LexemeTerminal("real")

Type:SubprogramDeclarations
Production:NonTerminal(SubprogramDeclaration)|LexemeTerminal(";")|NonTerminal(SubprogramDeclarations)
Symbol:LexemeTerminal("function")|LexemeTerminal("procedure")
Production:
Symbol:LexemeTerminal("begin")

Type:SubprogramDeclaration
Production:NonTerminal(SubprogramHead)|NonTerminal(Declarations)|NonTerminal(CompoundStatement)
Symbol:LexemeTerminal("function")|LexemeTerminal("procedure")

Type:SubprogramHead
Production:LexemeTerminal("function")|AnySymbolOfClass(IdentifierSymbol)|NonTerminal(Arguments)|LexemeTerminal(":")|NonTerminal(StandardType)|LexemeTerminal(";")
Symbol:LexemeTerminal("function")
Production:LexemeTerminal("procedure")|AnySymbolOfClass(IdentifierSymbol)|NonTerminal(Arguments)|LexemeTerminal(";")
Symbol:LexemeTerminal("procedure")

Type:Arguments
Production:LexemeTerminal("(")|NonTerminal(ParameterList)|LexemeTerminal(")")
Symbol:LexemeTerminal("(")
Production:
Symbol:LexemeTerminal(";")|LexemeTerminal(":")

Type:ParameterList
Production:NonTerminal(IdList)|LexemeTerminal(":")|NonTerminal(Type)|NonTerminal(ParameterList`)
Symbol:AnySymbolOfClass(IdentifierSymbol)

Type:ParameterList`
Production:LexemeTerminal(";")|NonTerminal(IdList)|LexemeTerminal(":")|NonTerminal(Type)|NonTerminal(ParameterList`)
Symbol:LexemeTerminal(";")
Production:
Symbol:LexemeTerminal(")")

Type:CompoundStatement
Production:LexemeTerminal("begin")|NonTerminal(OptionalStatements)|LexemeTerminal("end)
Symbol:LexemeTerminal("begin")

Type:OptionalStatements
Production:NonTerminal(StatementList)
Symbol:AnySymbolOfClass(IdentifierSymbol)|LexemeTerminal("begin")|LexemeTerminal("if")|LexemeTerminal("while")
Production:
Symbol:LexemeTerminal("end")

Type:StatementList
Production:NonTerminal(Statement)|NonTerminal(StatementList`)
Symbol:AnySymbolOfClass(IdentifierSymbol)|LexemeTerminal("begin")|LexemeTerminal("if")|LexemeTerminal("while")

Type:StatementList`
Production:LexemeTerminal(";")|NonTerminal(Statement)|NonTerminal(StatementList`)
Symbol:LexemeTerminal(";")
Production:
Symbol:LexemeTerminal("end")

Type:Statement
Production:NonTerminal(IdStatement)
Symbol:AnySymbolOfClass(IdentifierSymbol)
Production:NonTerminal(CompoundStatement)
Symbol:LexemeTerminal("begin")
Production:LexemeTerminal("if")|NonTerminal(Expressions)|LexemeTerminal("then")|NonTerminal(Statement)|LexemeTerminal("else")|NonTerminal(Statement)
Symbol:LexemeTerminal("if")
Production:LexemeTerminal("while")|NonTerminal(Expressions)|LexemeTerminal("do")|NonTerminal(Statement)
Symbol:LexemeTerminal("while")

Type:IdStatement
Production:AnySymbolOfClass(IdentifierSymbol)|NonTerminal(IdStatement`)
Symbol:AnySymbolOfClass(IdentifierSymbol)

Type:IdStatement`
Production:NonTerminal(VariableStatement)
Symbol:AnySymbolOfClass(AssignmentOperatorSymbol)|LexemeTerminal("[")
Production:ProcedureStatement
Symbol:LexemeTerminal("(")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")


Type:VariableStatement
Production:AnySymbolOfClass(AssignmentOperatorSymbol)|NonTerminal(Expression)
Symbol:AnySymbolOfClass(AssignmentOperatorSymbol)
Production:LexemeTerminal("[")|NonTerminal(Expression)|LexemeTerminal("]")|AnySymbolOfClass(AssignmentOperatorSymbol)|NonTerminal(Expression)
Symbol:LexemeTerminal("[")

Type:ProcedureStatement
Production:
Symbol:LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")
Production:LexemeTerminal("(")|NonTerminal(ExpressionList)|LexemeTerminal(")")
Symbol:LexemeTerminal("(")

Type:ExpressionList
Production:NonTerminal(Expression)|NonTerminal(ExpressionList`)
Symbol:AnySymbolOfClass(IdentifierSymbol)|AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("(")|LexemeTerminal("not")|LexemeTerminal("+")|LexemeTerminal("-")

Type:ExpressionList`
Production:LexemeTerminal(",")|NonTerminal(Expression)|NonTerminal(ExpressionList`)
Symbol:LexemeTerminal(",")
Production:
Symbol:LexemeTerminal(")")

Type:Expression
Production:NonTerminal(SimpleExpression)|NonTerminal(Expression`)
Symbol:AnySymbolOfClass(IdentifierSymbol)|AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("(")|LexemeTerminal("not")|LexemeTerminal("+")|LexemeTerminal("-")

Type:Expression`
Production:
Symbol:LexemeTerminal(")")|LexemeTerminal("]")|LexemeTerminal(",")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")
Production:AnySymbolOfClass(RelationalOperatorSymbol)|NonTerminal(SimpleExpression)
Symbol:AnySymbolOfClass(RelationalOperatorSymbol)

Type:SimpleExpression
Production:NonTerminal(Term)|NonTerminal(SimpleExpression`)
Symbol:AnySymbolOfClass(IdentifierSymbol)|AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("(")|LexemeTerminal("not")
Production:NonTerminal(Sign)|NonTerminal(Term)|NonTerminal(SimpleExpression`)
Symbol:LexemeTerminal("+")|LexemeTerminal("-")

Type:SimpleExpression`
Production:AnySymbolOfClass(AdditionOperatorSymbol)|NonTerminal(Term)|NonTerminal(SimpleExpression`)
Symbol:AnySymbolOfClass(AdditionOperatorSymbol)
Production:
Symbol:AnySymbolOfClass(RelationalOperatorSymbol)|LexemeTerminal(")")|LexemeTerminal("]")|LexemeTerminal(",")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")

Type:Term
Production:NonTerminal(Factor)|NonTerminal(Term`)
Symbol:AnySymbolOfClass(IdentifierSymbol)|AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("(")|LexemeTerminal("not")

Symbol:Term`
Production:AnySymbolOfClass(MultiplicationOperatorSymbol)|NonTerminal(Factor)|NonTerminal(Term`)
Symbol:AnySymbolOfClass(MultiplicationOperatorSymbol)
Production:
Symbol:AnySymbolOfClass(AdditionOperatorSymbol)|AnySymbolOfClass(RelationalOperatorSymbol)|LexemeTerminal(")")|LexemeTerminal("]")|LexemeTerminal(",")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")

Type:Factor
Production:AnySymbolOfClass(IdentifierSymbol)|NonTerminal(Factor`)
Symbol:AnySymbolOfClass(IdentifierSymbol)
Production:AnySymbolOfClass(LiteralSymbol<int>)
Symbol:AnySymbolOfClass(LiteralSymbol<int>)
Production:LexemeTerminal("(")|NonTerminal(Expression)|LexemeTerminal(")")
Symbol:LexemeTerminal("(")
Production:LexemeTerminal("not")|NonTerminal(Factor)
Symbol:LexemeTerminal("not")

Type:Factor`
Production:
Symbol:AnySymbolOfClass(MultiplicationOperatorSymbol)|AnySymbolOfClass(AdditionOperatorSymbol)|AnySymbolOfClass(RelationalOperatorSymbol)|LexemeTerminal(")")|LexemeTerminal("]")|LexemeTerminal(",")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")
Production:LexemeTerminal("(")|NonTerminal(ExpressionList)|LexemeTerminal(")")
Symbol:LexemeTerminal("(")

Type:Sign
Production:LexemeTerminal("+")
Symbol:LexemeTerminal("+")
Production:LexemeTerminal("-")
Symbol:LexemeTerminal("-")