Type:Program
Production:LexemeTerminal("Program")|AnySymbolOfClass(IdentifierSymbol)|LexemeTerminal("(")|NonTerminal(IdList)|LexemeTerminal(")")|LexemeTerminal(";")|NonTerminal(Declarations)|NonTerminal(SubprogramDeclarations)|NonTerminal(CompoundStatement)|LexemeTerminal(".")
Symbol:LexemeTerminal("Program")

Type:IdList
Production:AnySymbolOfClass(IdentifierSymbol)|NonTerminal(IdList`)
Symbol:AnySymbolOfClass(IdentifierSymbol)

Type:IdList`
Production:LexemeTerminal("|")|AnySymbolOfClass(IdentifierSymbol)|NonTerminal(IdList`)
Symbol:LexemeTerminal("|")
Production:
Symbol:LexemeTerminal(":")|LexemeTerminal(")")

Type:Declarations
Production:LexemeTerminal("var")|NonTerminal(IdList)|LexemeTerminal(":")|NonTerminal(Type)|LexemeTerminal(";")|NonTerminal(Declarations)
Symbol:LexemeTerminal("var")
Production:
Symbol:LexemeTerminal("function")|LexemeTerminal("procedure")|LexemeTerminal("begin")

Type:Type
Production:NonTerminal(StandardType)
Symbol:LexemeTerminal("integer")|LexemeTerminal("real")
Production:LexemeTerminal("array")|LexemeTerminal("[")|AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal(".")|LexemeTerminal(".")|AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("]")|LexemeTerminal("of")|NonTerminal(StandardType)
Symbol:LexemeTerminal("array")
~~~~~
Type:StandardType
Production:LexemeTerminal("integer")
Symbol:LexemeTerminal("integer")
Production:LexemeTerminal("real")
Symbol:LexemeTerminal("real")

Type:SubprogramDeclarations
Production:NonTerminal(SubprogramDeclaration)|LexemeTerminal(";")|NonTerminal(SubprogramDeclarations)
Symbol:LexemeTerminal("function")|Symbol:LexemeTerminal("procedure")
Production:
Symbol:LexemeTerminal("begin")

Type:SubprogramDeclaration
Production:NonTerminal(SubprogramHead)|NonTerminal(Declarations)|NonTerminal(CompoundStatement)
Symbol:LexemeTerminal("function")|LexemeTerminal("procedure")

Type:SubprogramHead
Production:LexemeTerminal("function")|AnySymbolOfClass(IdentifierSymbol)|NonTerminal(Arguments)|LexemeTerminal(":")|NonTerminal(StandardType)|LexemeTerminal(";")
Symbol:LexemeTerminal("function")
Production:LexemeTerminal("procedure")|AnySymbolOfClass(IdentifierSymbol))|NonTerminal(Arguments)|LexemeTerminal(";")
Symbol:LexemeTerminal("procedure")

Type:Arguments
Production:LexemeTerminal("(")|NonTerminal(ParameterList)|LexemeTerminal(")"
Symbol:LexemeTerminal("(")
Production:
Symbol:LexemeTerminal(";")|LexemeTerminal(":")

Type:ParameterList
Production:NonTerminal(IdList)|LexemeTerminal(":")|NonTerminal(Type)|NonTerminal(ParameterList`)
Symbol:AnySymbolOfClass(IdentifierSymbol)

Type:ParameterList`
Production:LexemeTerminal(";")|NonTerminal(IdList)|LexemeTerminal(":")|NonTerminal(Type)|NonTerminal(ParameterList`)
Symbol:LexemeTerminal(";")
Production:
Symbol:LexemeTerminal(")")

Type:CompoundStatement
Production:LexemeTerminal("begin")|NonTerminal(OptionalStatements)|LexemeTerminal("end)
Symbol:LexemeTerminal("begin")

Type:OptionalStatements
Production:NonTerminal(StatementList)
Symbol:AnySymbolOfClass(IdentifierSymbol)|LexemeTerminal("begin")|LexemeTerminal("if")|LexemeTerminal("while")
Production:
Symbol:LexemeTerminal("end")

Type:StatementList
Production:NonTerminal(Statement)|NonTerminal(StatementList`)
Symbol:AnySymbolOfClass(IdentifierSymbol)|LexemeTerminal("begin")|LexemeTerminal("if")|LexemeTerminal("while")

Type:StatementList`
Production:LexemeTerminal(";")|NonTerminal(Statement)|NonTerminal(StatementList`)
Symbol:LexemeTerminal(";")
Production:
Symbol:LexemeTerminal("end")

Type:Statement
Production:NonTerminal(IdStatement)
Symbol:AnySymbolOfClass(IdentifierSymbol)
Production:NonTerminal(CompoundStatement)
Symbol:LexemeTerminal("begin")
Production:LexemeTerminal("if")|NonTerminal(Expressions)|LexemeTerminal("then")|NonTerminal(Statement)|LexemeTerminal("else")|NonTerminal(Statement)
Symbol:LexemeTerminal("if")
Production:LexemeTerminal("while")|NonTerminal(Expressions)|LexemeTerminal("do")|NonTerminal(Statement)
Symbol:LexemeTerminal("while")

Type:IdStatement
Production:AnySymbolOfClass(IdentifierSymbol))|NonTerminal(IdStatement`)
Symbol:AnySymbolOfClass(IdentifierSymbol)

Type:IdStatement`
Production:NonTerminal(VariableStatement)
Symbol:AnySymbolOfClass(AssignmentOperatorSymbol)|LexemeTerminal("[")
Production:ProcedureStatement
Symbol:LexemeTerminal("(")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")

Type:VariableStatement
Production:AnySymbolOfClass(AssignmentOperatorSymbol)|NonTerminal(Expression)
Symbol:AnySymbolOfClass(AssignmentOperatorSymbol)
VariableStatement
Production:[Expression]AnySymbolOfClass(AssignmentOperatorSymbol)NonTerminal(Expression)
Symbol:LexemeTerminal("[")
ProcedureStatement
Production:<nil>
Symbol:LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")
ProcedureStatement
Production:(ExpressionList)
Symbol:LexemeTerminal("(")
ExpressionList
Production:ExpressionExpressionList`AnySymbolOfClass(IdentifierSymbol)|AnySymbolOfClass(AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("(")|LexemeTerminal("not")|LexemeTerminal("+")|LexemeTerminal("-")
Symbol:ExpressionList`
Production:|ExpressionExpressionList`
Symbol:LexemeTerminal("|")
ExpressionList`
Production:<nil>
LexemeTerminal(")")
Expression
Production:SimpleExpressionExpression`AnySymbolOfClass(IdentifierSymbol)|AnySymbolOfClass(AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("(")|LexemeTerminal("not")|LexemeTerminal("+")|LexemeTerminal("-")
Expression`
Production:<nil>
LexemeTerminal(")")|LexemeTerminal("]")|LexemeTerminal("|")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")
Expression`
Production:AnySymbolOfClass(RelationalOperatorSymbol)SimpleExpression
AnySymbolOfClass(RelationalOperatorSymbol)
SimpleExpression
Production:TermSimpleExpression`AnySymbolOfClass(IdentifierSymbol)|AnySymbolOfClass(AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("(")|LexemeTerminal("not")
SimpleExpression
Production:SignTermSimpleExpression`
LexemeTerminal("+")|LexemeTerminal("-")
SimpleExpression`
Production:AnySymbolOfClass(AdditionOperatorSymbol)TermSimpleExpression`
AnySymbolOfClass(AdditionOperatorSymbol)
SimpleExpression`
Production:<nil>
AnySymbolOfClass(RelationalOperatorSymbol)|LexemeTerminal(")")|LexemeTerminal("]")|LexemeTerminal("|")|
LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")
Term
Production:FactorTerm`AnySymbolOfClass(IdentifierSymbol)|AnySymbolOfClass(AnySymbolOfClass(LiteralSymbol<int>)|LexemeTerminal("(")|LexemeTerminal("not")
Term`
Production:AnySymbolOfClass(MultiplicationOperatorSymbol)FactorTerm`
AnySymbolOfClass(MultiplicationOperatorSymbol)
Term`
Production:<nil>
AnySymbolOfClass(AdditionOperatorSymbol)|AnySymbolOfClass(RelationalOperatorSymbol)|LexemeTerminal(")")|LexemeTerminal("]")|
LexemeTerminal("|")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")
Factor
Production:AnySymbolOfClass(IdentifierSymbol)Factor`AnySymbolOfClass(IdentifierSymbol)
Factor
Production:AnySymbolOfClass(AnySymbolOfClass(LiteralSymbol<int>)
AnySymbolOfClass(AnySymbolOfClass(LiteralSymbol<int>)
Factor
Production:(Expression)
LexemeTerminal("(")
Factor
Production:notfactor
LexemeTerminal("not")
Factor`
Production:<nil>
AnySymbolOfClass(MultiplicationOperatorSymbol)|AnySymbolOfClass(AdditionOperatorSymbol)|AnySymbolOfClass(RelationalOperatorSymbol)|LexemeTerminal(")")|
LexemeTerminal("]")|LexemeTerminal("|")|LexemeTerminal("else")|LexemeTerminal(";")|LexemeTerminal("end")
Factor`
Production:(ExpressionList)
LexemeTerminal("(")
Sign
Production:+
LexemeTerminal("+")
Sign
Production:-
LexemeTerminal("-")